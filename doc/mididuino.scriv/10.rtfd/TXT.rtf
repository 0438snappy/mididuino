{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf110
{\fonttbl\f0\fswiss\fcharset0 Optima-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\fi560\sl288\slmult1\sb160\ql\qnatural\pardirnatural

\f0\fs26 \cf0 This tutorial is the first that actually produces MIDI messages on the MiniCommand. We are setting up two encoders, grouping them in an 
\b EncoderPage
\b0  as seen previously, and sending out MIDI CC messages when the value of the encoders is changed.\
\
RangeEncoder param1(0, 127, "P1");\
RangeEncoder param2(0, 127, "P2");\
EncoderPage page(&param1, &param2);\
\
void setup() \{\
  GUI.setPage(&page);\
\}\
\
This code is the same in the previous tutorial. We are now going to react to encoder changes in the main loop of the sketch by using the 
\b hasChanged()
\b0  method of the 
\b Encoder
\b0  class. The MIDI CC message is sent by using the 
\b sendCC()
\b0  method of the 
\b MidiUart
\b0  object. This object models the first MIDI port of the MiniCommand (the only one featuring a MIDI output). It has a huge number of methods to send different MIDI messages, such as 
\b sendNoteOn()
\b0 , 
\b sendNoteOff()
\b0 , etc\'85 The 
\b getValue()
\b0  method of the 
\b Encoder
\b0  class is used to get the current value of the 
\b Encoder
\b0 .\
\
void loop() \{\
  if (param1.hasChanged()) \{\
    MidiUart.sendCC(1, param1.getValue());\
  \}\
  if (param2.hasChanged()) \{\
    MidiUart.sendCC(2, param2.getValue());\
  \}\
\}\
\
This sketch can be expanded by sending MIDI note messages when buttons are pressed. This is done by checking for button pressed in the 
\b handleEvent()
\b0  function, which is called automatically when events are received.\
\
bool handleEvent(gui_event_t *evt) \{\
  if (EVENT_PRESSED(evt, Buttons.BUTTON1)) \{\
    MidiUart.sendNoteOn(1, 100);\
    return true;\
  \}\
  if (EVENT_RELEASED(evt, Buttons.BUTTON1)) \{\
    MidiUart.sendNoteOff(1);\
    return true;\
  \}\
  \
  return false;\
\}\
\
Of course, this way of polling for encoder changes get a bit tedious and slow, especially when the number of encoders starts to grow (for example when using multiple pages). The MidiDuino framework helps with this by providing a number of 
\b Encoder
\b0  subclasses that provide their own handler function. This function is called automatically by the MidiDuino runloop when the value of an encoder is changed. The 
\b CCEncoder
\b0  class for example automatically sends CC messages. The example above can thus be rewritten as follows:\
\
CCEncoder param1(1, 0, "P1");\
CCEncoder param2(2, 0, "P2");\
EncoderPage page(&param1, &param2);\
\
void setup() \{\
  GUI.setPage(&page);\
\}\
\
\
}