{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf110
{\fonttbl\f0\fswiss\fcharset0 Optima-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\fi560\sl288\slmult1\sb160\ql\qnatural\pardirnatural

\f0\fs26 \cf0 In this second sketch, we are going to react to button presses by the user. The buttons are regularly polled by the framework (2000 times per second to be precise), reading in if a button is pressed \'93down\'94 or is in its default \'93up\'94 state. The state of a button can be read by using the 
\b BUTTON_DOWN()
\b0  and 
\b BUTTON_UP()
\b0  macros, and giving them the identifier for a button. These identifiers are 
\b Buttons.BUTTON1
\b0  (top left), 
\b Buttons.BUTTON2
\b0  (bottom left), 
\b Buttons.BUTTON3
\b0  (bottom right), 
\b Buttons.BUTTON4
\b0  (top right) and 
\b Buttons.ENCODER1 
\b0 (leftmost encoder) to 
\b Buttons.ENCODER4
\b0  (rightmost encoder). The encoders also function as push-buttons, and the 
\b BUTTON_DOWN()
\b0  and 
\b BUTTON_UP()
\b0  macros can be used as with normal buttons.\
In this first firmware example, we are polling the state of the buttons in a function called 
\b loop()
\b0  and displaying it on screen. Like 
\b setup()
\b0 , the 
\b loop()
\b0  function is part of the \'93standard\'94 structure of a sketch. It is called over and over by the framework as long as the firmware is running. This can be used to do calculations or react on user interaction. Most of the time however, the 
\b loop()
\b0  function is not used, as the user interaction is handled inside 
\b Page
\b0  objects (see the #XXX# Page and Sketch tutorial).\
Another method of the 
\b GUI
\b0  object that is shown in this firmware is the 
\b setLine()
\b0  method. It is used to select on which line of the screen the following data has to be displayed. It wasn\'92t used in the first firmware because we were only writing one string on the first line. In this firmware, we display the name of the firmware on the first line, and displaying the button status on the second line.\
\
void setup() \{\
  GUI.setLine(GUI.LINE1);\
  GUI.put_string_fill("BUTTON TEST");\
\}\
\
void loop() \{\
  GUI.setLine(GUI.LINE2);\
  if (BUTTON_DOWN(Buttons.BUTTON1)) \{\
    GUI.put_string_fill("DOWN");\
  \} \
  else \{\
    GUI.put_string_fill("UP");\
  \}\
\}\
\
\
However, most of the time, we are not interested in the state of a button, but rather if it was pressed (going from \'93up\'94 to \'93down\'94) or released (going from \'93down\'94 to \'93up\'94). Rather than leaving the polling of these events (comparing the old state of the button to the new state and recognizing transitions), the Mididuino frameworks uses an event-based system. These events are created when polling the button, and are stored in a queue. This queue is then processed, and for each event, an event handler is called. GUI events are automatically passed to active 
\b Pages
\b0  (see the tutorial about creating a page), and to the function 
\b handleEvent()
\b0 . Like the 
\b setup()
\b0  function, this function only needs to be defined if it is used. For more details about event handlers and processing button presses, check the #XXX# Interrupts section in the #XXX# Internals chapter.\
The 
\b handleEvent()
\b0  is given an event of the type 
\b gui_event_t
\b0  as argument, and is expected to return a boolean value (
\b true
\b0  or 
\b false
\b0 ). If the 
\b handleEvent()
\b0  recognizes the event and processes it, it returns 
\b true
\b0  to signal the framework that the event has been handled and doesn\'92t need further processing. This can be useful when multiple pages are active (on top of one another), or a general functionality needs to be made available for the whole firmware (for example pressing all four buttons to return to the sketch selection page).\
In this second firmware, we use the 
\b handleEvent()
\b0  function to recognize button presses and releases. We use the macro 
\b EVENT_PRESSED()
\b0  to recognize if a button was pressed, and 
\b EVENT_RELEASED()
\b0  to recognize if a button was released. We return 
\b true
\b0  from the 
\b handleEvent()
\b0  function when the first button was either pressed or released. In other cases, we do not handle the event and return 
\b false
\b0 .\
\
void setup() \{\
  GUI.setLine(GUI.LINE1);\
  GUI.put_string_fill("BUTTONS TEST 2");\
\}\
\
bool handleEvent(gui_event_t *evt) \{\
  GUI.setLine(GUI.LINE2);\
  if (EVENT_PRESSED(evt, Buttons.BUTTON1)) \{\
    GUI.flash_string_fill("PRESSED");\
    return true;\
  \}\
  if (EVENT_RELEASED(evt, Buttons.BUTTON1)) \{\
    GUI.flash_string_fill("RELEASED");\
    return true;\
  \}\
  \
  return false;\
\}\
}