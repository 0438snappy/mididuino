{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf110
{\fonttbl\f0\fswiss\fcharset0 Optima-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\fi560\sl288\slmult1\sb160\ql\qnatural\pardirnatural

\f0\fs26 \cf0 The Mididuino framework is written in C++, which is a widely used programming language. However, embedded firmwares (programs running on a dedicated piece of hardware, usually on a smaller processor) are usually programmed in C. The decision to choose C++ as the main programming language was made so that it would be easier to write custom firmwares while reusing a big amount of the code of the framework. \
C++ is an object oriented programming language, allowing the programmer to describe common functionality inside constructs called \'93classes\'94. These classes can then be instantiated into specific objects. For example, the 
\b RangeEncoder
\b0  class of the Mididuino framework describes how to handle a range limited encoder (with a minimum and maximum value). This functionality is written only once, but multiple objects of the 
\b RangeEncoder
\b0  class can be instantiated, so that multiple range-limited encoders can be used in a firmware. \
Furthermore, the object orientation allows us to inherit functionality. For example, all the access to the actual hardware is not written into the 
\b RangeEncoder
\b0  class, but rather written in the base 
\b Encoder
\b0  class (alongside other functionality such as setting the name of an encoder, and standard methods of accessing, displaying, refreshing and updating an encoder). This inheritance concept allows the programmer to extend existing classes to make them fit his needs. This is used most commonly while writing firmwares to implement custom 
\b Page
\b0  classes and custom 
\b Sketch
\b0  classes. A library of common pages and sketches is provided in the framework itself, allowing the programmer to use pages out of the official firmwares.\
A class consist of data and methods. Data is used to store values for each instance of the class (for example, an 
\b Encoder
\b0  object stores its value), while methods are functions containing the class\'92 functionality. A special method is the constructor method, which is called when an instance of a class is created. The constructor method is used to initialize the data of the class, and maybe carry out further calculations. A similar method is the destructor method, which is called when an instance of a class is destroyed. Due to the constraints of the Mididuino platform (see below), destructors are almost never used in the Mididuino framework.\
Because the Mididuino framework runs on a pretty small platform (the microcontroller used is an 8-bit processor running at 16 Mhz, with 64 kB of code space and 64 kB of RAM), only a subset of C++ is used. Virtual inheritance (which allows a subclass to function as a class higher up its inheritance hierarchy) is used sparingly, as it adds a function pointer table for each class, and an indirection during method calls. Dynamic allocation is never used, instead all used objects are either allocated on the stack or statically. Templates are used sparingly for basic data structures. Template use leads to code size increases, which is the scarcest resource for Mididuino firmwares (and is one of the main targets for future improvements to the framework).}