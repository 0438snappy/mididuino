<dumpObj>
<title class='class' module='Track'>Instance of class 'class' as defined in module 'Track'</title>
<documentation> This class represents a track in Live. It can be either an Audio 
track, a MIDI Track, a Return Track or the Master track. The Master 
Track and at least one Audio or MIDI track will be always present.
Return Tracks are optional. </documentation>
<builtin>
<name> __init__ </name>
<name>  __new__ </name>
</builtin>
<classes>
<class>
<name> monitoring_states </name>
<doc> no documentation </doc>
</class>
</classes>
<methods>
<method>
<name> __eq__ </name>
<doc> 
__eq__( (object)arg1, (Track)arg2) -&gt; bool :

    C++ signature :
        bool __eq__(TWeakPtr&lt;TPyHandle&lt;ATrack&gt; &gt;,TPyHandle&lt;ATrack&gt;*) </doc>
</method>
<method>
<name> __ne__ </name>
<doc> 
__ne__( (object)arg1, (Track)arg2) -&gt; bool :

    C++ signature :
        bool __ne__(TWeakPtr&lt;TPyHandle&lt;ATrack&gt; &gt;,TPyHandle&lt;ATrack&gt;*) </doc>
</method>
<method>
<name> __nonzero__ </name>
<doc> 
__nonzero__( (object)arg1) -&gt; bool :

    C++ signature :
        bool __nonzero__(TWeakPtr&lt;TPyHandle&lt;ATrack&gt; &gt;) </doc>
</method>
<method>
<name> __reduce__ </name>
<doc> no documentation </doc>
</method>
<method>
<name> jump_in_running_session_clip </name>
<doc> 
jump_in_running_session_clip( (Track)arg1, (float)arg2) -&gt; None :
    Jump forward or backward in the currently running Sessionclip (if any)
    by the specified relative amount in beats. Does nothing if no Session Clip
    is currently running.

    C++ signature :
        void jump_in_running_session_clip(TPyHandle&lt;ATrack&gt;,double) </doc>
</method>
<method>
<name> stop_all_clips </name>
<doc> 
stop_all_clips( (Track)arg1) -&gt; None :
    Stop running and triggered clip and slots on this track.

    C++ signature :
        void stop_all_clips(TPyHandle&lt;ATrack&gt;) </doc>
</method>
</methods>
<attributes>
<attribute>
<name> View </name>
<type> Representing the view aspects of a Track. </type>
<value> class Track.View </value>
</attribute>
<attribute>
<name> arm </name>
<type> Arm the track for recording. Not available for Master- and Send Tracks. </type>
<value> property object at 0x2d9cbe8 </value>
</attribute>
<attribute>
<name> can_be_armed </name>
<type> return True, if this Track has a valid arm property. Not all tracks
can be armed (for example return Tracks or the Master Tracks). </type>
<value> property object at 0x2d9cb98 </value>
</attribute>
<attribute>
<name> canonical_parent </name>
<type> Get the canonical parent of the track. </type>
<value> property object at 0x2d9ccd8 </value>
</attribute>
<attribute>
<name> clip_slots </name>
<type> const access to the list of clipslots (see class AClipSlot) for this track.
The list will be empty for the master and sendtracks. </type>
<value> property object at 0x2d9cee0 </value>
</attribute>
<attribute>
<name> current_input_routing </name>
<type> Get/Set the name of the current active input routing.
When setting a new routing, the new routing must be one of the available ones. </type>
<value> property object at 0x2da3210 </value>
</attribute>
<attribute>
<name> current_input_sub_routing </name>
<type> Get/Set the current active input sub routing.
When setting a new routing, the new routing must be one of the available ones. </type>
<value> property object at 0x2da3260 </value>
</attribute>
<attribute>
<name> current_monitoring_state </name>
<type> Get/Set the track's current monitoring state. </type>
<value> property object at 0x2da3198 </value>
</attribute>
<attribute>
<name> current_output_routing </name>
<type> Get/Set the current active output routing.
When setting a new routing, the new routing must be one of the available ones. </type>
<value> property object at 0x2da32d8 </value>
</attribute>
<attribute>
<name> current_output_sub_routing </name>
<type> Get/Set the current active output sub routing.
When setting a new routing, the new routing must be one of the available ones. </type>
<value> property object at 0x2da3328 </value>
</attribute>
<attribute>
<name> devices </name>
<type> Return const access to all available Devices that are present in the Tracks
Devicechain. This tuple will also include the 'mixer_device' that every Track
always has. </type>
<value> property object at 0x2da3058 </value>
</attribute>
<attribute>
<name> fired_slot_index </name>
<type> const access to the index of the fired (and thus blinking) clipslot in this track.
This index is -1 if no slot is fired and -2 if the track's stop button has been fired. </type>
<value> property object at 0x2d9cf30 </value>
</attribute>
<attribute>
<name> fold_state </name>
<type> Get/Set whether the track is folded or not. Only available if is_foldable is True. </type>
<value> property object at 0x2d9cd50 </value>
</attribute>
<attribute>
<name> has_audio_input </name>
<type> return True, if this Track can be feed with an Audio signal. This is
true for all Audio Tracks. </type>
<value> property object at 0x2d9cda0 </value>
</attribute>
<attribute>
<name> has_audio_output </name>
<type> return True, if this Track sends out an Audio signal. This is
true for all Audio Tracks, and MIDI tracks with an Instrument. </type>
<value> property object at 0x2d9cdf0 </value>
</attribute>
<attribute>
<name> has_midi_input </name>
<type> return True, if this Track can be feed with an Audio signal. This is
true for all MIDI Tracks. </type>
<value> property object at 0x2d9ce40 </value>
</attribute>
<attribute>
<name> has_midi_output </name>
<type> return True, if this Track sends out MIDI events. This is
true for all MIDI Tracks with no Instruments. </type>
<value> property object at 0x2d9ce90 </value>
</attribute>
<attribute>
<name> input_meter_left </name>
<type> Momentary value of left input channel meter, 0.0 to 1.0. For Audio Tracks only. </type>
<value> property object at 0x2da30d0 </value>
</attribute>
<attribute>
<name> input_meter_level </name>
<type> Return the MIDI or Audio meter value of the Tracks input, depending on the
type of the Track input. Meter values (MIDI or Audio) are always scaled
from 0.0 to 1.0. </type>
<value> property object at 0x2da3080 </value>
</attribute>
<attribute>
<name> input_meter_right </name>
<type> Momentary value of right input channel meter, 0.0 to 1.0. For Audio Tracks only. </type>
<value> property object at 0x2da3120 </value>
</attribute>
<attribute>
<name> input_routings </name>
<type> Const access to the list of available input routings. </type>
<value> property object at 0x2da31c0 </value>
</attribute>
<attribute>
<name> input_sub_routings </name>
<type> Return a list of all available input sub routings. </type>
<value> property object at 0x2da3238 </value>
</attribute>
<attribute>
<name> is_foldable </name>
<type> return True if the track can be (un)folded to hide/reveal contained tracks. </type>
<value> property object at 0x2d9cd00 </value>
</attribute>
<attribute>
<name> is_part_of_selection </name>
<type> return False if the track is not selected. </type>
<value> property object at 0x2d9ccb0 </value>
</attribute>
<attribute>
<name> is_visible </name>
<type> return False if the track is hidden within a folded group track. </type>
<value> property object at 0x2d9cc60 </value>
</attribute>
<attribute>
<name> mixer_device </name>
<type> Return access to the special Device that every Track has: This Device contains
the Volume, Pan, Sendamounts, and Crossfade assignment parameters. </type>
<value> property object at 0x2d9cfd0 </value>
</attribute>
<attribute>
<name> mute </name>
<type> Mute/unmute the track. </type>
<value> property object at 0x2d9cb48 </value>
</attribute>
<attribute>
<name> name </name>
<type> Read/write access to the name of the Track, as visible in the track header. </type>
<value> property object at 0x2d9cb20 </value>
</attribute>
<attribute>
<name> output_meter_left </name>
<type> Momentary value of left output channel meter, 0.0 to 1.0.
For tracks with audio output only. </type>
<value> property object at 0x2da3148 </value>
</attribute>
<attribute>
<name> output_meter_level </name>
<type> Return the MIDI or Audio meter value of the Track output (behind the
mixer_device), depending on the type of the Track input, this can be a MIDI
or Audio meter. Meter values (MIDI or Audio) are always scaled from 0.0 to 1.0. </type>
<value> property object at 0x2da30a8 </value>
</attribute>
<attribute>
<name> output_meter_right </name>
<type> Momentary value of right output channel meter, 0.0 to 1.0.
For tracks with audio output only. </type>
<value> property object at 0x2da3170 </value>
</attribute>
<attribute>
<name> output_routings </name>
<type> Const access to the list of all available output routings. </type>
<value> property object at 0x2da3288 </value>
</attribute>
<attribute>
<name> output_sub_routings </name>
<type> Return a list of all available output sub routings. </type>
<value> property object at 0x2da3300 </value>
</attribute>
<attribute>
<name> playing_slot_index </name>
<type> const access to the index of the currently playing clip in the track.
Will be -1 when no clip is playing. </type>
<value> property object at 0x2d9cf80 </value>
</attribute>
<attribute>
<name> solo </name>
<type> Get/Set the solo status of the track. Note that this will not disable the
solo state of any other track. If you want exclusive solo, you have to 
disable the solo state of the other Tracks manually. </type>
<value> property object at 0x2d9cb70 </value>
</attribute>
<attribute>
<name> view </name>
<type> Representing the view aspects of a Track. </type>
<value> property object at 0x2da3350 </value>
</attribute>
</attributes>
<listeners>
<listener>
<name> arm </name>
</listener>
<listener>
<name> clip_slots </name>
</listener>
<listener>
<name> current_input_routing </name>
</listener>
<listener>
<name> current_input_sub_routing </name>
</listener>
<listener>
<name> current_monitoring_state </name>
</listener>
<listener>
<name> current_output_routing </name>
</listener>
<listener>
<name> current_output_sub_routing </name>
</listener>
<listener>
<name> devices </name>
</listener>
<listener>
<name> fired_slot_index </name>
</listener>
<listener>
<name> has_audio_input </name>
</listener>
<listener>
<name> has_audio_output </name>
</listener>
<listener>
<name> has_midi_input </name>
</listener>
<listener>
<name> has_midi_output </name>
</listener>
<listener>
<name> input_meter_left </name>
</listener>
<listener>
<name> input_meter_level </name>
</listener>
<listener>
<name> input_meter_right </name>
</listener>
<listener>
<name> mute </name>
</listener>
<listener>
<name> name </name>
</listener>
<listener>
<name> output_meter_left </name>
</listener>
<listener>
<name> output_meter_level </name>
</listener>
<listener>
<name> output_meter_right </name>
</listener>
<listener>
<name> playing_slot_index </name>
</listener>
<listener>
<name> solo </name>
</listener>
</listeners>
</dumpObj>
